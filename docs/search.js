window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "paddles", "modulename": "paddles", "kind": "module", "doc": "<p><code>paddles</code> is a pedagogical algorithms and data structures library that aims to</p>\n\n<ul>\n<li>be thoroughly tested and documented</li>\n<li>be easy to install, use and understand</li>\n<li>adhere to good Python coding practices.</li>\n</ul>\n\n<p><code>paddles</code> is a work in progress.\nThe current version implements stacks, queues, deques and bags.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use <code>paddles</code>, follow these steps:</p>\n\n<ol>\n<li>Open a terminal and enter <code>python -V</code> to get your Python's version.\nIf the version is 3.10 or higher, go directly to step 3.</li>\n<li>If the version is lower than 3.10 or if you get an error message\n(e.g. 'python is an unknown command'), then close the terminal and\ninstall the <a href=\"https://www.python.org/downloads/\">latest Python version</a>.</li>\n<li>In the same terminal as step 1, or a new one if you did step 2,\nenter <code>pip install paddles</code>.</li>\n<li>To check that the library is now available, enter <code>python -m paddles.stack</code>.\nYou should not get any error message.</li>\n</ol>\n\n<p>If you have any problems during installation, please report them in the\n<a href=\"https://github.com/dsa-ou/paddles/discussions/categories/q-a\">Q &amp; A discussion forum</a>.\n(If you're an M269 student or tutor you can use the Technical Forum instead.)\nDon't forget to indicate your operating system, your Python version,\nand what you did before the problem occurred, so that we can help you more effectively.</p>\n\n<ol start=\"5\">\n<li>Read the <a href=\"https://dsa-ou.github.io/paddles\">documentation</a> to learn how to\nuse the data structures and algorithms provided by <code>paddles</code>.</li>\n</ol>\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>Any help to improve and extend <code>paddles</code> is welcome and appreciated.</p>\n\n<ul>\n<li>If you're an M269 student or tutor, you can report errors and suggest improvements\nin the Technical Forum instead of using GitHub's forums and issue tracker.</li>\n<li>If you require a new feature, please suggest it in the\n<a href=\"https://github.com/dsa-ou/paddles/discussions/categories/ideas\">ideas discussion forum</a>.</li>\n<li>If you spot an error or omission in the code or documentation, please check if it\n<a href=\"https://github.com/dsa-ou/paddles/issues\">has been reported</a>, before creating a new issue.</li>\n<li>If you want to contribute code or documentation that addresses\nan <a href=\"https://github.com/dsa-ou/paddles/issues\">open issue</a>, please read first our\n<a href=\"https://github.com/dsa-ou/paddles/blob/main/CONTRIBUTING.md\">contribution guide</a>.\nYour contribution will become available under the terms below.</li>\n</ul>\n\n<h2 id=\"licences\">Licences</h2>\n\n<p><code>paddles</code> is Copyright \u00a9 2024\u20132025 by The Open University, UK.\nThe code is licensed under a <a href=\"https://github.com/dsa-ou/paddles/blob/main/LICENSE\">BSD 3-clause licence</a>.\nThe documentation is licensed under a\n<a href=\"http://creativecommons.org/licenses/by/4.0\">Creative Commons Attribution 4.0 International Licence</a>.</p>\n"}, {"fullname": "paddles.bag", "modulename": "paddles.bag", "kind": "module", "doc": "<p>This module implements the Bag (Multiset) ADT.</p>\n\n<h2 id=\"intuition\">Intuition</h2>\n\n<p>The Bag ADT models a 'bunch' of objects, e.g. a bag of marbles.</p>\n\n<h2 id=\"definition\">Definition</h2>\n\n<p>A <strong>bag</strong> (also called <strong>multiset</strong>) is an unordered collection of members,\npossibly with duplicates.\nThe number of times each member occurs is called its <strong>frequency</strong>.</p>\n\n<h2 id=\"operations\">Operations</h2>\n\n<p>The Bag ADT provides operations to:</p>\n\n<ul>\n<li>create a new empty bag</li>\n<li>add one copy of a new or of an existing member</li>\n<li>remove one copy of an existing member</li>\n<li>count how many copies of a given item are in the bag (0 if it isn't)</li>\n<li>compute the size of the bag (total number of copies)</li>\n<li>compute the union of bags A and B: if an item occurs <em>x</em> times in A\nand <em>y</em> times in B, then it occurs max(<em>x</em>, <em>y</em>) times in the union</li>\n<li>compute the intersection of bags A and B: if an item occurs <em>x</em> times in A\nand <em>y</em> times in B, then it occurs min(<em>x</em>, <em>y</em>) times in the intersection</li>\n<li>compute the difference of bags A and B: if an item occurs <em>x</em> times in A\nand <em>y</em> times in B, then it occurs max(<em>x</em> - <em>y</em>, 0) times in the difference</li>\n</ul>\n\n<h2 id=\"applications\">Applications</h2>\n\n<p>Bags are used to count how often each item occurs,\ne.g. how many times each word appears in a text.</p>\n\n<h2 id=\"implementations\">Implementations</h2>\n\n<p>A bag can be represented as a map of items to their frequency.\nThe map can be implemented with a hash table (if items are hashable) or\nwith a binary search tree (if items are comparable).\n<code>paddles</code> only provides a hash table implementation for the moment.</p>\n"}, {"fullname": "paddles.bag.HashTableBag", "modulename": "paddles.bag", "qualname": "HashTableBag", "kind": "class", "doc": "<p>An implementation of the Bag ADT with a Python dictionary.</p>\n\n<p>Besides the ADT's basic operations, for convenience this class allows to:</p>\n\n<ul>\n<li>create a non-empty bag from an iterable collection of items</li>\n<li>convert a bag to a string, to see its members and their frequency</li>\n<li>check membership, i.e. whether a bag contains a given item</li>\n<li>add or remove more than one copy of an item at once</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">paddles</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">HashTableBag</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">HashTableBag</span><span class=\"p\">(</span><span class=\"s2\">&quot;picnic&quot;</span><span class=\"p\">)</span>               <span class=\"c1\"># create a non-empty bag</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>                                 <span class=\"c1\"># number of members</span>\n<span class=\"go\">6</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">frequency</span><span class=\"p\">(</span><span class=\"s2\">&quot;c&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>                            <span class=\"c1\"># add 3 copies of &quot;a&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"s2\">&quot;c&quot;</span><span class=\"p\">)</span>                            <span class=\"c1\"># remove 1 copy of &quot;c&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>                                 <span class=\"c1\"># str(bag) also possible</span>\n<span class=\"go\">HashTableBag({&#39;p&#39;: 1, &#39;i&#39;: 2, &#39;c&#39;: 1, &#39;n&#39;: 1, &#39;a&#39;: 3})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"s2\">&quot;T&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vowels</span> <span class=\"o\">=</span> <span class=\"n\">HashTableBag</span><span class=\"p\">(</span><span class=\"s2\">&quot;aeiou&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># characters that are in text or in vowels</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">vowels</span><span class=\"p\">))</span>                   <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">HashTableBag({&#39;p&#39;: 1, &#39;i&#39;: 2, &#39;c&#39;: 1, &#39;n&#39;: 1, &#39;a&#39;: 3, &#39;e&#39;: 1, &#39;o&#39;: 1, &#39;u&#39;: 1})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># vowels that occur in text</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">vowels</span><span class=\"p\">))</span>            <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">HashTableBag({&#39;i&#39;: 1, &#39;a&#39;: 1})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># vowels that aren&#39;t in text</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vowels</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>              <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">HashTableBag({&#39;e&#39;: 1, &#39;o&#39;: 1, &#39;u&#39;: 1})</span>\n</code></pre>\n</div>\n"}, {"fullname": "paddles.bag.HashTableBag.__init__", "modulename": "paddles.bag", "qualname": "HashTableBag.__init__", "kind": "function", "doc": "<p>Initialize the bag with the <code>items</code>.</p>\n\n<p>To create an empty bag, call <code>HashTableBag()</code>.\nIf <code>items</code> is a dictionary, only its keys are added to the bag.</p>\n\n<p>Complexity: O(len(<code>items</code>))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">Hashable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, {"fullname": "paddles.bag.HashTableBag.add", "modulename": "paddles.bag", "qualname": "HashTableBag.add", "kind": "function", "doc": "<p>Add the given number of copies of <code>item</code> to the bag.</p>\n\n<p>If omitted, <code>copies</code> defaults to 1.\nRaise <code>ValueError</code> if <code>copies</code> is not positive.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>, </span><span class=\"param\"><span class=\"n\">copies</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.remove", "modulename": "paddles.bag", "qualname": "HashTableBag.remove", "kind": "function", "doc": "<p>Remove the given number of copies of <code>item</code> from the bag.</p>\n\n<p>Raise <code>ValueError</code> if <code>copies &lt; 1</code> or <code>self.frequency(item) &lt; copies</code>.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span>, </span><span class=\"param\"><span class=\"n\">copies</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.frequency", "modulename": "paddles.bag", "qualname": "HashTableBag.frequency", "kind": "function", "doc": "<p>Return how many times <code>item</code> occurs in the bag.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.has", "modulename": "paddles.bag", "qualname": "HashTableBag.has", "kind": "function", "doc": "<p>Check if <code>item</code> is in the bag.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Hashable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.size", "modulename": "paddles.bag", "qualname": "HashTableBag.size", "kind": "function", "doc": "<p>Return how many members (total copies) the bag has.</p>\n\n<p>Complexity: O(n), where n is the number of unique items in the bag.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.unique", "modulename": "paddles.bag", "qualname": "HashTableBag.unique", "kind": "function", "doc": "<p>Return the set of the unique members in the bag.</p>\n\n<p>Complexity: O(n), where n is the number of unique items in the bag.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">set</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.union", "modulename": "paddles.bag", "qualname": "HashTableBag.union", "kind": "function", "doc": "<p>Return a new bag with the items that occur in either bag.</p>\n\n<p>The frequency of <code>item</code> in the union is\n<code>max(self.frequency(item), other.frequency(item))</code>.</p>\n\n<p>Complexity: O(s + o), where s and o are the number of unique items in\nthis bag and <code>other</code>, respectively.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">paddles</span><span class=\"o\">.</span><span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">HashTableBag</span></span><span class=\"return-annotation\">) -> <span class=\"n\">paddles</span><span class=\"o\">.</span><span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">HashTableBag</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.intersection", "modulename": "paddles.bag", "qualname": "HashTableBag.intersection", "kind": "function", "doc": "<p>Return a new bag with the common members of this bag and <code>other</code>.</p>\n\n<p>The frequency of <code>item</code> in the intersection is\n<code>min(self.frequency(item), other.frequency(item))</code>.</p>\n\n<p>Complexity: O(s + o), where s and o are the number of unique items in\nthis bag and <code>other</code>, respectively.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">paddles</span><span class=\"o\">.</span><span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">HashTableBag</span></span><span class=\"return-annotation\">) -> <span class=\"n\">paddles</span><span class=\"o\">.</span><span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">HashTableBag</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.difference", "modulename": "paddles.bag", "qualname": "HashTableBag.difference", "kind": "function", "doc": "<p>Return a new bag with the members of this bag that aren't in <code>other</code>.</p>\n\n<p>Complexity: O(n), with n the number of unique items in this bag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">paddles</span><span class=\"o\">.</span><span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">HashTableBag</span></span><span class=\"return-annotation\">) -> <span class=\"n\">paddles</span><span class=\"o\">.</span><span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">HashTableBag</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.equal_to", "modulename": "paddles.bag", "qualname": "HashTableBag.equal_to", "kind": "function", "doc": "<p>Check if this bag has the same members as <code>other</code>.</p>\n\n<p>Complexity: O(n), with n the number of unique items in this bag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">paddles</span><span class=\"o\">.</span><span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">HashTableBag</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.bag.HashTableBag.included_in", "modulename": "paddles.bag", "qualname": "HashTableBag.included_in", "kind": "function", "doc": "<p>Check if all members of this bag are members of <code>other</code>.</p>\n\n<p>Complexity: O(n), with n the number of unique items in this bag</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">paddles</span><span class=\"o\">.</span><span class=\"n\">bag</span><span class=\"o\">.</span><span class=\"n\">HashTableBag</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.deque", "modulename": "paddles.deque", "kind": "module", "doc": "<p>This module implements the Deque ADT.</p>\n\n<h2 id=\"intuition\">Intuition</h2>\n\n<p>The Deque ADT models a line of objects that can be accessed, added to and\nremoved from either end of the line.\nA deque can be used as a <a href=\"stack.html\">stack</a> or as a <a href=\"queue.html\">queue</a>.</p>\n\n<h2 id=\"definition\">Definition</h2>\n\n<p>A <strong>deque</strong>, pronounced 'deck' and short for 'double-ended queue', is a sequence\nwhere only the members at both ends of the sequence\n(called the <strong>front</strong> and the <strong>back</strong> of the queue) can be accessed and removed.\nNew members can only be added at the front or at the back.</p>\n\n<h2 id=\"operations\">Operations</h2>\n\n<p>The Deque ADT provides operations to:</p>\n\n<ul>\n<li>create a new empty deque</li>\n<li>add a new member to the front of the deque</li>\n<li>add a new member to the back of the deque</li>\n<li>remove the member at the front of the deque</li>\n<li>remove the member at the back of the deque</li>\n<li>access the member at the front of the deque without removing it</li>\n<li>access the member at the back of the deque without removing it</li>\n<li>compute the size of the deque (number of members).</li>\n</ul>\n\n<h2 id=\"applications\">Applications</h2>\n\n<p>Consider using a deque when you need to simulate a queue where</p>\n\n<ul>\n<li>objects jump the queue (join at the front) or\nleave it from the back after waiting a certain time</li>\n<li>the direction of the queue changes, like cars on a ferry.</li>\n</ul>\n\n<h2 id=\"implementations\">Implementations</h2>\n\n<p>The Deque ADT can be implemented with circular dynamic arrays or doubly-linked lists.\nIn both cases, the operations listed above take constant time.\nA doubly-linked list uses much more memory than a static array of the same length,\nbut a dynamic array may have wasted capacity and requires resizing.\n<code>paddles</code> only provides a doubly-linked list implementation for the moment.</p>\n"}, {"fullname": "paddles.deque.LinkedListDeque", "modulename": "paddles.deque", "qualname": "LinkedListDeque", "kind": "class", "doc": "<p>An implementation of the Deque ADT, using a doubly-linked list.</p>\n\n<p>Besides the ADT's operations, this class provides two convenience operations:</p>\n\n<ul>\n<li>create a non-empty deque from a given sequence</li>\n<li>convert a deque to a string, to see its members listed from front to back.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">paddles</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">LinkedListDeque</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">deque</span> <span class=\"o\">=</span> <span class=\"n\">LinkedListDeque</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>          <span class=\"c1\"># create a non-empty deque</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">deque</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>                            <span class=\"c1\"># number of members</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">deque</span><span class=\"o\">.</span><span class=\"n\">take_front</span><span class=\"p\">()</span>                      <span class=\"c1\"># remove and return the front member</span>\n<span class=\"go\">&#39;a&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">deque</span><span class=\"o\">.</span><span class=\"n\">take_back</span><span class=\"p\">()</span>                       <span class=\"c1\"># remove and return the back member</span>\n<span class=\"go\">&#39;c&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">deque</span><span class=\"o\">.</span><span class=\"n\">front</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">deque</span><span class=\"o\">.</span><span class=\"n\">back</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;b&#39;</span>    <span class=\"c1\"># return the front and back members</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">deque</span><span class=\"o\">.</span><span class=\"n\">add_back</span><span class=\"p\">(</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">)</span>                     <span class=\"c1\"># add a new member at the back</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">deque</span><span class=\"o\">.</span><span class=\"n\">add_front</span><span class=\"p\">(</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">)</span>                    <span class=\"c1\"># add a new member at the front</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">deque</span><span class=\"p\">)</span>                            <span class=\"c1\"># str(deque) also possible</span>\n<span class=\"go\">LinkedListDeque([&#39;A&#39;, &#39;b&#39;, &#39;C&#39;])</span>\n</code></pre>\n</div>\n"}, {"fullname": "paddles.deque.LinkedListDeque.__init__", "modulename": "paddles.deque", "qualname": "LinkedListDeque.__init__", "kind": "function", "doc": "<p>Initialize the deque with the members of <code>sequence</code>.</p>\n\n<p>The members are added to the deque in the order they are in <code>sequence</code>.\nTo create an empty deque, call <code>LinkedListDeque()</code> or <code>LinkedListDeque([])</code>.</p>\n\n<p>Complexity: O(len(<code>sequence</code>))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, {"fullname": "paddles.deque.LinkedListDeque.size", "modulename": "paddles.deque", "qualname": "LinkedListDeque.size", "kind": "function", "doc": "<p>Return how many members the deque has.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.deque.LinkedListDeque.front", "modulename": "paddles.deque", "qualname": "LinkedListDeque.front", "kind": "function", "doc": "<p>Return the item at the front of the deque, without removing it.</p>\n\n<p>Raise <code>ValueError</code> if the deque is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.deque.LinkedListDeque.back", "modulename": "paddles.deque", "qualname": "LinkedListDeque.back", "kind": "function", "doc": "<p>Return the item at the back of the deque, without removing it.</p>\n\n<p>Raise <code>ValueError</code> if the deque is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.deque.LinkedListDeque.add_front", "modulename": "paddles.deque", "qualname": "LinkedListDeque.add_front", "kind": "function", "doc": "<p>Put <code>item</code> at the front of the deque.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.deque.LinkedListDeque.add_back", "modulename": "paddles.deque", "qualname": "LinkedListDeque.add_back", "kind": "function", "doc": "<p>Put <code>item</code> at the back of the deque.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.deque.LinkedListDeque.take_front", "modulename": "paddles.deque", "qualname": "LinkedListDeque.take_front", "kind": "function", "doc": "<p>Remove and return the item at the front of the deque.</p>\n\n<p>Raise <code>ValueError</code> if the deque is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.deque.LinkedListDeque.take_back", "modulename": "paddles.deque", "qualname": "LinkedListDeque.take_back", "kind": "function", "doc": "<p>Remove and return the item at the back of the deque.</p>\n\n<p>Raise <code>ValueError</code> if the deque is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.queue", "modulename": "paddles.queue", "kind": "module", "doc": "<p>This module implements the Queue ADT.</p>\n\n<h2 id=\"intuition\">Intuition</h2>\n\n<p>The Queue ADT models a line of objects, e.g. cars waiting to board a ferry.\nOnly the object at the front of the line can be accessed and removed.\nThe only way to add an object is to put it at the back of the line.</p>\n\n<h2 id=\"definition\">Definition</h2>\n\n<p>A <strong>queue</strong> is a sequence where members are added to one end of the sequence\n(the <strong>back</strong> of the queue) and removed from the other end (the <strong>front</strong> of the queue).</p>\n\n<p>A queue is a <strong>first-in, first-out (FIFO)</strong> sequence:\nthe members are removed in the same order they were added.</p>\n\n<p>A queue is a sequence ordered by age (time of addition).\nThe oldest member is at the front of the queue, and the youngest member is at the back.</p>\n\n<h2 id=\"operations\">Operations</h2>\n\n<p>The Queue ADT provides operations to:</p>\n\n<ul>\n<li>create a new empty queue</li>\n<li>add a new member, at the back of the existing ones</li>\n<li>remove the member at the front of the queue</li>\n<li>access the member at the front of the queue without removing it</li>\n<li>compute the size of the queue (number of members).</li>\n</ul>\n\n<h2 id=\"applications\">Applications</h2>\n\n<p>Queues are used to implement breadth-first search.\nYou should consider using a queue when you need to:</p>\n\n<ul>\n<li>simulate a real-life queue, like travellers at passport control or\ndocuments in a printer queue</li>\n<li>process items in the same order they were added, like a to-do list.</li>\n</ul>\n\n<h2 id=\"implementations\">Implementations</h2>\n\n<p>The Queue ADT can be implemented with circular dynamic arrays or singly-linked lists.\nIn both cases, the operations listed above take constant time.\nA singly-linked list uses much more memory than a static array of the same length,\nbut a dynamic array may have wasted capacity and requires resizing.\n<code>paddles</code> only provides a singly-linked list implementation for the moment.</p>\n\n<h2 id=\"practice\">Practice</h2>\n\n<p>LeetCode has several <a href=\"https://leetcode.com/tag/queue\">problems about queues</a>.\nClick twice on 'Difficulty' to order them from easy to hard.\nClick on 'Show problem tags' to see what other ADTs they require.</p>\n"}, {"fullname": "paddles.queue.LinkedListQueue", "modulename": "paddles.queue", "qualname": "LinkedListQueue", "kind": "class", "doc": "<p>An implementation of the Queue ADT, using a singly-linked list.</p>\n\n<p>Besides the ADT's operations, this class provides two convenience operations:</p>\n\n<ul>\n<li>create a non-empty queue from a given sequence</li>\n<li>convert a queue to a string, to see its members listed from front to back.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">paddles</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">LinkedListQueue</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">LinkedListQueue</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># create a non-empty queue</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>                    <span class=\"c1\"># number of members</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">dequeue</span><span class=\"p\">()</span>                 <span class=\"c1\"># remove and return the front member</span>\n<span class=\"go\">&#39;a&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">front</span><span class=\"p\">()</span>                   <span class=\"c1\"># return but don&#39;t remove the front member</span>\n<span class=\"go\">&#39;b&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">enqueue</span><span class=\"p\">(</span><span class=\"s2\">&quot;d&quot;</span><span class=\"p\">)</span>              <span class=\"c1\"># add a new member at the back</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>                    <span class=\"c1\"># str(q) also possible</span>\n<span class=\"go\">LinkedListQueue([&#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span>\n</code></pre>\n</div>\n"}, {"fullname": "paddles.queue.LinkedListQueue.__init__", "modulename": "paddles.queue", "qualname": "LinkedListQueue.__init__", "kind": "function", "doc": "<p>Initialize the queue with the members of <code>sequence</code>.</p>\n\n<p>The members are added to the queue in the order they are in <code>sequence</code>.\nTo create an empty queue, call <code>LinkedListQueue()</code> or <code>LinkedListQueue([])</code>.</p>\n\n<p>Complexity: O(len(<code>sequence</code>))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, {"fullname": "paddles.queue.LinkedListQueue.size", "modulename": "paddles.queue", "qualname": "LinkedListQueue.size", "kind": "function", "doc": "<p>Return how many members the queue has.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.queue.LinkedListQueue.front", "modulename": "paddles.queue", "qualname": "LinkedListQueue.front", "kind": "function", "doc": "<p>Return the member at the front of the queue, without removing it.</p>\n\n<p>Raise <code>ValueError</code> if the queue is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.queue.LinkedListQueue.enqueue", "modulename": "paddles.queue", "qualname": "LinkedListQueue.enqueue", "kind": "function", "doc": "<p>Put <code>item</code> at the back of the queue.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.queue.LinkedListQueue.dequeue", "modulename": "paddles.queue", "qualname": "LinkedListQueue.dequeue", "kind": "function", "doc": "<p>Remove and return the item at the front of the queue.</p>\n\n<p>Raise <code>ValueError</code> if the queue is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.sorting", "modulename": "paddles.sorting", "kind": "module", "doc": "<p>This module implements sorting algorithms.</p>\n\n<h2 id=\"intuition\">Intuition</h2>\n\n<p>Sorting is the process of putting items in a specific order,\naccording to some criterion.</p>\n\n<h2 id=\"definition\">Definition</h2>\n\n<p>A <strong>sorting algorithm</strong> puts members of a collection in a certain order,\naccording to a criterion usually given by a <strong>comparison function</strong>.\nTo sort a collection, its members must be <strong>comparable</strong> with each other.\nA sorting algorithm may return a new sorted sequence with the input's members,\nor it may modify an input sequence <strong>in-place</strong>, rearranging its members.</p>\n\n<p><strong>Stable</strong> sorting algorithms keep items that compare equal in their original order.</p>\n\n<p>An <strong>adaptive</strong> sorting algorithm takes advantage of existing order in its input.\nAdaptive algorithms do the least work if the input is already sorted.</p>\n\n<h2 id=\"operations\">Operations</h2>\n\n<p>This module provides two kinds of functions:</p>\n\n<ul>\n<li>those named <code>..._sort</code> take a Python list and sort it in-place</li>\n<li>those named <code>..._sorted</code> take any iterable collection and return a new sorted list.</li>\n</ul>\n\n<p>The aim of this module is not to provide flexible sorting functions,\nthat can sort in ascending or descending order, using a custom comparison function.\nThe aim is to convey the algorithms as clearly as possible, keeping the code simple.\nTherefore, all functions only sort in <strong>non-descending order</strong>,\nwith Python's <code>&lt;=</code> operator.</p>\n\n<h2 id=\"applications\">Applications</h2>\n\n<p>Sorting is a fundamental computational operation, as it makes items easier to look up,\ne.g. trains are listed by arrival or departure time, people are listed by name, etc.\nYou should consider sorting a collection when you repeatedly need to search it.</p>\n\n<h2 id=\"problems\">Problems</h2>\n\n<p>LeetCode has several <a href=\"https://leetcode.com/tag/sorting\">problems about sorting</a>.\nClick twice on 'Difficulty' to sort them from easy to hard.\nClick on 'Show problem tags' to see what ADTs they require.</p>\n"}, {"fullname": "paddles.sorting.tim_sort", "modulename": "paddles.sorting", "qualname": "tim_sort", "kind": "function", "doc": "<p>Put <code>items</code> in non-descending order, in-place, using TimSort.</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Timsort\">TimSort</a> is Python's sorting algorithm,\nderived from Insertion Sort and Merge Sort. It is adaptive and stable.</p>\n\n<p>Complexity: worst O(n log n), best O(n), with n = len(items)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.stack", "modulename": "paddles.stack", "kind": "module", "doc": "<p>This module implements the Stack ADT.</p>\n\n<h2 id=\"intuition\">Intuition</h2>\n\n<p>The Stack ADT models a pile of objects, e.g. a pile of storage boxes.\nOnly the object at the top of the pile can be accessed and removed.\nThe only way to add an object is to put it on top of the existing pile.</p>\n\n<h2 id=\"definition\">Definition</h2>\n\n<p>A <strong>stack</strong> is a sequence where members are removed from and added to\nthe same end of the sequence, called the <strong>top</strong> of the stack.</p>\n\n<p>A stack is a <strong>last-in, first-out (LIFO)</strong> sequence:\nthe next member to be removed is the one most recently added.</p>\n\n<p>A stack is a sequence ordered by age (time of addition).\nThe oldest member is at the bottom of the stack, and the youngest member is at the top.</p>\n\n<h2 id=\"operations\">Operations</h2>\n\n<p>The Stack ADT provides operations to:</p>\n\n<ul>\n<li>create a new empty stack</li>\n<li>add a new member, on top of the existing ones</li>\n<li>remove the member at the top of the stack</li>\n<li>access the member at the top of the stack without removing it</li>\n<li>compute the size of the stack (number of members).</li>\n</ul>\n\n<h2 id=\"applications\">Applications</h2>\n\n<p>Stacks are used to implement function calls and depth-first search.\nYou should consider using a stack when you need to:</p>\n\n<ul>\n<li>simulate the handling of a pile of objects, like loading and unloading ship containers</li>\n<li>process nested structures, like brackets (e.g. <code>print([1, {2, 3}])</code>) or\nHTML tags (e.g. <code>&lt;p&gt;&lt;b&gt;text&lt;/b&gt;&lt;/p&gt;</code>)</li>\n<li>process items in the reverse order they were added, like undo operations\n(the next command to be undone is the most recently executed one).</li>\n</ul>\n\n<h2 id=\"implementations\">Implementations</h2>\n\n<p>The Stack ADT can be implemented with dynamic arrays or singly-linked lists.\nIn both cases, the operations listed above take constant time.\nA singly-linked list uses much more memory than a static array of the same length,\nbut a dynamic array may have wasted capacity and requires resizing.</p>\n\n<h2 id=\"practice\">Practice</h2>\n\n<p>LeetCode has several <a href=\"https://leetcode.com/tag/stack\">problems about stacks</a>.\nClick twice on 'Difficulty' to order them from easy to hard.\nClick on 'Show problem tags' to see what other ADTs they require.</p>\n"}, {"fullname": "paddles.stack.DynamicArrayStack", "modulename": "paddles.stack", "qualname": "DynamicArrayStack", "kind": "class", "doc": "<p>An implementation of the Stack ADT, using Python lists.</p>\n\n<p>Besides the ADT's operations, this class provides two convenience operations:</p>\n\n<ul>\n<li>create a non-empty stack from a given sequence</li>\n<li>convert a stack to a string, to see its members listed from bottom to top.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">paddles</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">DynamicArrayStack</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">DynamicArrayStack</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>    <span class=\"c1\"># create a non-empty stack</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>                        <span class=\"c1\"># number of members</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>                         <span class=\"c1\"># remove and return the top member</span>\n<span class=\"go\">&#39;c&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">peek</span><span class=\"p\">()</span>                        <span class=\"c1\"># return but don&#39;t remove the top member</span>\n<span class=\"go\">&#39;b&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">)</span>                     <span class=\"c1\"># add a new member on top</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span>                        <span class=\"c1\"># str(stack) also possible</span>\n<span class=\"go\">DynamicArrayStack([&#39;a&#39;, &#39;b&#39;, &#39;C&#39;])</span>\n</code></pre>\n</div>\n"}, {"fullname": "paddles.stack.DynamicArrayStack.__init__", "modulename": "paddles.stack", "qualname": "DynamicArrayStack.__init__", "kind": "function", "doc": "<p>Initialize the stack with the members of <code>sequence</code>.</p>\n\n<p>The members are added to the stack in the order they are in <code>sequence</code>.\nTo create an empty stack, call <code>DynamicArrayStack()</code> or <code>DynamicArrayStack([])</code>.</p>\n\n<p>Complexity: O(len(<code>sequence</code>))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, {"fullname": "paddles.stack.DynamicArrayStack.size", "modulename": "paddles.stack", "qualname": "DynamicArrayStack.size", "kind": "function", "doc": "<p>Return how many members the stack has.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.stack.DynamicArrayStack.peek", "modulename": "paddles.stack", "qualname": "DynamicArrayStack.peek", "kind": "function", "doc": "<p>Return the member at the top of the stack, without removing it.</p>\n\n<p>Raise <code>ValueError</code> if the stack is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.stack.DynamicArrayStack.push", "modulename": "paddles.stack", "qualname": "DynamicArrayStack.push", "kind": "function", "doc": "<p>Put <code>item</code> on top of the stack.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.stack.DynamicArrayStack.pop", "modulename": "paddles.stack", "qualname": "DynamicArrayStack.pop", "kind": "function", "doc": "<p>Remove and return the member at the top of the stack.</p>\n\n<p>Raise <code>ValueError</code> if the stack is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.stack.LinkedListStack", "modulename": "paddles.stack", "qualname": "LinkedListStack", "kind": "class", "doc": "<p>An implementation of the Stack ADT, using singly-linked lists.</p>\n\n<p>Besides the ADT's operations, this class provides two convenience operations:</p>\n\n<ul>\n<li>create a non-empty stack from a given sequence</li>\n<li>convert a stack to a string, to see its members listed from bottom to top.</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">paddles</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">LinkedListStack</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">LinkedListStack</span><span class=\"p\">(</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>      <span class=\"c1\"># create a non-empty stack</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">()</span>                        <span class=\"c1\"># number of members</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>                         <span class=\"c1\"># remove and return the top member</span>\n<span class=\"go\">&#39;c&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">peek</span><span class=\"p\">()</span>                        <span class=\"c1\"># return but don&#39;t remove the top member</span>\n<span class=\"go\">&#39;b&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">)</span>                     <span class=\"c1\"># add a new member on top</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span>                        <span class=\"c1\"># str(stack) also possible</span>\n<span class=\"go\">LinkedListStack([&#39;a&#39;, &#39;b&#39;, &#39;C&#39;])</span>\n</code></pre>\n</div>\n"}, {"fullname": "paddles.stack.LinkedListStack.__init__", "modulename": "paddles.stack", "qualname": "LinkedListStack.__init__", "kind": "function", "doc": "<p>Initialize the stack with the members of <code>sequence</code>.</p>\n\n<p>The members are added to the stack in the order they are in <code>sequence</code>.\nTo create an empty stack, call <code>LinkedListStack()</code> or <code>LinkedListStack([])</code>.</p>\n\n<p>Complexity: O(len(<code>sequence</code>))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sequence</span><span class=\"p\">:</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, {"fullname": "paddles.stack.LinkedListStack.size", "modulename": "paddles.stack", "qualname": "LinkedListStack.size", "kind": "function", "doc": "<p>Return how many members the stack has.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.stack.LinkedListStack.push", "modulename": "paddles.stack", "qualname": "LinkedListStack.push", "kind": "function", "doc": "<p>Put <code>item</code> on top of the stack.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.stack.LinkedListStack.pop", "modulename": "paddles.stack", "qualname": "LinkedListStack.pop", "kind": "function", "doc": "<p>Remove and return the member at the top of the stack.</p>\n\n<p>Raise <code>ValueError</code> if the stack is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "paddles.stack.LinkedListStack.peek", "modulename": "paddles.stack", "qualname": "LinkedListStack.peek", "kind": "function", "doc": "<p>Return the member at the top of the stack.</p>\n\n<p>Raise <code>ValueError</code> if the stack is empty.</p>\n\n<p>Complexity: O(1)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();